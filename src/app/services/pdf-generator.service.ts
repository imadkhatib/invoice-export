import {Injectable} from '@angular/core';
import {jsPDF} from 'jspdf';
import {InvoiceFormData} from "../interfaces/invoice.interface";

@Injectable({
  providedIn: 'root'
})
export class PdfGeneratorService {

  businessName = 'Invoice Export System';
  generateInvoicePdf(formData: InvoiceFormData): File {
    const doc = new jsPDF();

    this.addHeader(doc);
    this.addPersonalDetails(doc, formData.personalDetails);
    this.addInvoiceDetails(doc, formData.invoiceDetails);
    this.addSignature(doc, formData.signature);
    this.addFooter(doc);

    const fileName = this.generateFileName(formData.invoiceDetails.invoiceNumber);
    const pdfBlob = doc.output('blob');

    return new File([pdfBlob], fileName, {type: 'application/pdf'});
  }

  private addHeader(doc: jsPDF): void {
    const pageWidth = doc.internal.pageSize.width;

    doc.setFillColor(33, 150, 243);
    doc.rect(0, 0, pageWidth, 40, 'F');

    doc.setTextColor(255, 255, 255);
    doc.setFontSize(26);
    doc.setFont('helvetica', 'bold');
    doc.text('INVOICE', 20, 15);

    doc.setTextColor(255, 255, 255);
    doc.setFontSize(20);
    doc.setFont('helvetica', 'normal');
    doc.text(this.businessName, 20, 25);

    doc.setTextColor(255, 255, 255);
    doc.setFontSize(18);
    doc.setFont('helvetica', 'normal');
    doc.text('16930 Kfar Kanna p.o box 2818', 20, 35);

    doc.setFontSize(10);
    doc.setFont('helvetica', 'normal');
    const currentDate = new Date().toLocaleDateString();
    doc.text(`Created on: ${currentDate}`, pageWidth - 20, 25, {align: 'right'});
    doc.setTextColor(0, 0, 0);
  }

  private addPersonalDetails(doc: jsPDF, personalDetails: any): void {
    let y = 50;

    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Personal Details', 20, y);
    y += 8;

    const leftColX = 20;
    const rightColX = 150; // values aligned here

    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');

    doc.text('Full Name:', leftColX, y);
    doc.text(`${personalDetails.fullName}`, rightColX, y, { align: 'right' });
    y += 8;

    doc.text('Email:', leftColX, y);
    doc.text(`${personalDetails.emailAddress}`, rightColX, y, { align: 'right' });
    y += 8;

    if (personalDetails.phoneNumber) {
      doc.text('Phone:', leftColX, y);
      doc.text(`${personalDetails.phoneNumber}`, rightColX, y, { align: 'right' });
      y += 8;
    }

    // Draw divider
    doc.setDrawColor(200);
    doc.line(20, y, 190, y);
  }

  private addInvoiceDetails(doc: jsPDF, invoiceDetails: any): void {
    let y = 90;

    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Invoice Details', 20, y);
    y += 10;

    doc.setFontSize(12);
    doc.setFont('helvetica', 'normal');

    const leftColX = 20;
    const rightColX = 150;

    doc.text('Invoice Number:', leftColX, y);
    doc.text(`${invoiceDetails.invoiceNumber}`, rightColX, y, {align: 'right'});
    y += 8;
    doc.text('Invoice Date:', leftColX, y);
    doc.text(`${invoiceDetails.invoiceDate.toLocaleDateString()}`, rightColX, y, {align: 'right'});

    y += 8;
    doc.text('Amount:', leftColX, y);
    doc.setFont('helvetica', 'bold');
    doc.text(`$${Number(invoiceDetails.amount).toFixed(2)}`, rightColX, y, {align: 'right'});
    doc.setDrawColor(200);
    doc.line(20, y + 8, 190, y + 8);
  }

  private addSignature(doc: jsPDF, signature: string): void {
    let y = 140;

    doc.setFontSize(14);
    doc.setFont('helvetica', 'bold');
    doc.text('Authorized Signature', 20, y);
    y += 10;

    if (signature && signature.trim() !== '') {
      try {
        doc.addImage(signature, 'PNG', 20, y, 60, 30);
        y += 10;
      } catch (error) {
        console.warn('Could not add signature to PDF:', error);
        doc.setFontSize(12);
        doc.setFont('helvetica', 'italic');
        doc.text('Signature: [Digital signature provided]', 20, y);
      }
    } else {
      doc.setFontSize(12);
      doc.setFont('helvetica', 'italic');
      doc.text('No signature provided', 20, y);
    }

    doc.setDrawColor(150);
    doc.line(20, y + 10, 100, y + 10);
  }


  private addFooter(doc: jsPDF): void {
    const pageHeight = doc.internal.pageSize.height - 50;
    doc.setFontSize(9);
    doc.setFont('helvetica', 'normal');
    doc.setTextColor(150);
    doc.text('Generated by ' + this.businessName, 20, pageHeight - 20);

    const docId = this.generateDocumentId();
    doc.text(`Document ID: ${docId}`, 20, pageHeight - 10);
    doc.setTextColor(0);
  }


  private generateFileName(invoiceNumber: string): string {
    const timestamp = new Date().toISOString().slice(0, 10);
    const cleanInvoiceNumber = invoiceNumber.replace(/[^a-zA-Z0-9]/g, '_');
    return `invoice_${cleanInvoiceNumber}_${timestamp}.pdf`;
  }

  private generateDocumentId(prefix: string = ''): string {
    // Use timestamp in base36
    const timestamp = Date.now().toString(36);

    // Use crypto for better randomness
    const randomArray = new Uint8Array(5);
    crypto.getRandomValues(randomArray);
    const random = Array.from(randomArray)
      .map(n => n.toString(36))
      .join('')
      .slice(0, 5);

    return `${prefix}${timestamp}${random}`.toUpperCase();
  }
}
